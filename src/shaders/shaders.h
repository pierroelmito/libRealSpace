#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input src/shaders/shaders.glsl --output src/shaders/shaders.h --slang glsl330

    Overview:

        Shader program 'bitmap':
            Get shader desc: bitmap_shader_desc(sg_query_backend());
            Vertex shader: bitmap_vs
                Attribute slots:
                    ATTR_bitmap_vs_position = 0
                Uniform block 'fsq_vs_params':
                    C struct: fsq_vs_params_t
                    Bind slot: SLOT_fsq_vs_params = 0
            Fragment shader: bitmap_fs
                Image 'fs_bitmap':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_fs_bitmap = 0

        Shader program 'clouds':
            Get shader desc: clouds_shader_desc(sg_query_backend());
            Vertex shader: clouds_vs
                Attribute slots:
                    ATTR_clouds_vs_position = 0
            Fragment shader: clouds_fs
                Uniform block 'fog_params':
                    C struct: fog_params_t
                    Bind slot: SLOT_fog_params = 0
                Image 'tex_depth':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_tex_depth = 0

        Shader program 'ground':
            Get shader desc: ground_shader_desc(sg_query_backend());
            Vertex shader: ground_vs
                Attribute slots:
                    ATTR_ground_vs_position = 0
                    ATTR_ground_vs_normal = 1
                    ATTR_ground_vs_texcoord = 2
                    ATTR_ground_vs_vcolor = 3
                Uniform block 'ground_vs_params':
                    C struct: ground_vs_params_t
                    Bind slot: SLOT_ground_vs_params = 0
            Fragment shader: ground_fs
                Image 'water':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_water = 0
                Image 'ground_bitmap':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_ground_bitmap = 1

        Shader program 'model':
            Get shader desc: model_shader_desc(sg_query_backend());
            Vertex shader: model_vs
                Attribute slots:
                    ATTR_model_vs_position = 0
                    ATTR_model_vs_normal = 1
                    ATTR_model_vs_texcoord = 2
                    ATTR_model_vs_vcolor = 3
                Uniform block 'model_vs_instance_params':
                    C struct: model_vs_instance_params_t
                    Bind slot: SLOT_model_vs_instance_params = 0
                Uniform block 'model_vs_global_params':
                    C struct: model_vs_global_params_t
                    Bind slot: SLOT_model_vs_global_params = 1
            Fragment shader: model_fs
                Image 'model_bitmap':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_model_bitmap = 0

        Shader program 'sky':
            Get shader desc: sky_shader_desc(sg_query_backend());
            Vertex shader: sky_vs
                Attribute slots:
                    ATTR_sky_vs_position = 0
                Uniform block 'sky_vs_params':
                    C struct: sky_vs_params_t
                    Bind slot: SLOT_sky_vs_params = 0
            Fragment shader: sky_fs
                Uniform block 'sky_fs_params':
                    C struct: sky_fs_params_t
                    Bind slot: SLOT_sky_fs_params = 0
                Image 'skydome':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_skydome = 0


    Shader descriptor structs:

        sg_shader bitmap = sg_make_shader(bitmap_shader_desc(sg_query_backend()));
        sg_shader clouds = sg_make_shader(clouds_shader_desc(sg_query_backend()));
        sg_shader ground = sg_make_shader(ground_shader_desc(sg_query_backend()));
        sg_shader model = sg_make_shader(model_shader_desc(sg_query_backend()));
        sg_shader sky = sg_make_shader(sky_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'bitmap_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_bitmap_vs_position] = { ... },
                },
            },
            ...});

    Vertex attribute locations for vertex shader 'sky_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_sky_vs_position] = { ... },
                },
            },
            ...});

    Vertex attribute locations for vertex shader 'clouds_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_clouds_vs_position] = { ... },
                },
            },
            ...});

    Vertex attribute locations for vertex shader 'model_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_model_vs_position] = { ... },
                    [ATTR_model_vs_normal] = { ... },
                    [ATTR_model_vs_texcoord] = { ... },
                    [ATTR_model_vs_vcolor] = { ... },
                },
            },
            ...});

    Vertex attribute locations for vertex shader 'ground_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_ground_vs_position] = { ... },
                    [ATTR_ground_vs_normal] = { ... },
                    [ATTR_ground_vs_texcoord] = { ... },
                    [ATTR_ground_vs_vcolor] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_fs_bitmap = 0;
        SLOT_skydome = 0;
        SLOT_tex_depth = 0;
        SLOT_model_bitmap = 0;
        SLOT_water = 0;
        SLOT_ground_bitmap = 1;

    Bind slot and C-struct for uniform block 'fsq_vs_params':

        fsq_vs_params_t fsq_vs_params = {
            .xy = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_fsq_vs_params, &SG_RANGE(fsq_vs_params));

    Bind slot and C-struct for uniform block 'sky_vs_params':

        sky_vs_params_t sky_vs_params = {
            .view = ...;
            .proj = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_sky_vs_params, &SG_RANGE(sky_vs_params));

    Bind slot and C-struct for uniform block 'sky_fs_params':

        sky_fs_params_t sky_fs_params = {
            .lightdir = ...;
            .colUp = ...;
            .colBot = ...;
            .colLight = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_sky_fs_params, &SG_RANGE(sky_fs_params));

    Bind slot and C-struct for uniform block 'fog_params':

        fog_params_t fog_params = {
            .fogColor = ...;
            .thickNess = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_fog_params, &SG_RANGE(fog_params));

    Bind slot and C-struct for uniform block 'model_vs_instance_params':

        model_vs_instance_params_t model_vs_instance_params = {
            .world = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_model_vs_instance_params, &SG_RANGE(model_vs_instance_params));

    Bind slot and C-struct for uniform block 'model_vs_global_params':

        model_vs_global_params_t model_vs_global_params = {
            .view = ...;
            .proj = ...;
            .pcampos = ...;
            .lightDir = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_model_vs_global_params, &SG_RANGE(model_vs_global_params));

    Bind slot and C-struct for uniform block 'ground_vs_params':

        ground_vs_params_t ground_vs_params = {
            .view = ...;
            .proj = ...;
            .world = ...;
            .pcampos = ...;
            .plightdir = ...;
            .gtime = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_ground_vs_params, &SG_RANGE(ground_vs_params));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_bitmap_vs_position (0)
#define ATTR_sky_vs_position (0)
#define ATTR_clouds_vs_position (0)
#define ATTR_model_vs_position (0)
#define ATTR_model_vs_normal (1)
#define ATTR_model_vs_texcoord (2)
#define ATTR_model_vs_vcolor (3)
#define ATTR_ground_vs_position (0)
#define ATTR_ground_vs_normal (1)
#define ATTR_ground_vs_texcoord (2)
#define ATTR_ground_vs_vcolor (3)
#define SLOT_fs_bitmap (0)
#define SLOT_skydome (0)
#define SLOT_tex_depth (0)
#define SLOT_model_bitmap (0)
#define SLOT_water (0)
#define SLOT_ground_bitmap (1)
#define SLOT_fsq_vs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct fsq_vs_params_t {
    hmm_vec2 xy;
    uint8_t _pad_8[8];
} fsq_vs_params_t;
#pragma pack(pop)
#define SLOT_sky_vs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct sky_vs_params_t {
    hmm_mat4 view;
    hmm_mat4 proj;
} sky_vs_params_t;
#pragma pack(pop)
#define SLOT_sky_fs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct sky_fs_params_t {
    hmm_vec3 lightdir;
    uint8_t _pad_12[4];
    hmm_vec3 colUp;
    uint8_t _pad_28[4];
    hmm_vec3 colBot;
    uint8_t _pad_44[4];
    hmm_vec3 colLight;
    uint8_t _pad_60[4];
} sky_fs_params_t;
#pragma pack(pop)
#define SLOT_fog_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct fog_params_t {
    hmm_vec3 fogColor;
    float thickNess;
} fog_params_t;
#pragma pack(pop)
#define SLOT_model_vs_instance_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct model_vs_instance_params_t {
    hmm_mat4 world;
} model_vs_instance_params_t;
#pragma pack(pop)
#define SLOT_model_vs_global_params (1)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct model_vs_global_params_t {
    hmm_mat4 view;
    hmm_mat4 proj;
    hmm_vec3 pcampos;
    uint8_t _pad_140[4];
    hmm_vec3 lightDir;
    uint8_t _pad_156[4];
} model_vs_global_params_t;
#pragma pack(pop)
#define SLOT_ground_vs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct ground_vs_params_t {
    hmm_mat4 view;
    hmm_mat4 proj;
    hmm_mat4 world;
    hmm_vec3 pcampos;
    uint8_t _pad_204[4];
    hmm_vec3 plightdir;
    float gtime;
} ground_vs_params_t;
#pragma pack(pop)
/*
    #version 330
    
    uniform vec4 fsq_vs_params[1];
    out vec4 uv;
    layout(location = 0) in vec4 position;
    
    void main()
    {
        uv = vec4(((fsq_vs_params[0].xy * position.xy) + vec2(1.0)) * 0.5, position.xy);
        gl_Position = position;
    }
    
*/
static const char bitmap_vs_source_glsl330[229] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x73,0x71,0x5f,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x3b,0x0a,0x6f,0x75,0x74,
    0x20,0x76,0x65,0x63,0x34,0x20,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,
    0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,
    0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x75,0x76,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x28,0x28,
    0x66,0x73,0x71,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,
    0x2e,0x78,0x79,0x20,0x2a,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2e,0x78,
    0x79,0x29,0x20,0x2b,0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,0x30,0x29,0x29,0x20,
    0x2a,0x20,0x30,0x2e,0x35,0x2c,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2e,
    0x78,0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform sampler2D fs_bitmap;
    
    in vec4 uv;
    layout(location = 0) out vec4 frag_color;
    
    vec3 vignetting(vec3 color, float p, float b)
    {
        return color;
    }
    
    void main()
    {
        vec4 _34 = texture(fs_bitmap, uv.xy);
        if (_34.w < 0.5)
        {
            discard;
        }
        vec3 param = _34.xyz;
        float param_1 = 8.0;
        float param_2 = 1.5;
        frag_color = vec4(vignetting(param, param_1, param_2), 1.0);
    }
    
*/
static const char bitmap_fs_source_glsl330[419] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,
    0x66,0x73,0x5f,0x62,0x69,0x74,0x6d,0x61,0x70,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x76,
    0x65,0x63,0x34,0x20,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,
    0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x3b,0x0a,0x0a,0x76,0x65,0x63,0x33,0x20,0x76,0x69,0x67,0x6e,0x65,0x74,0x74,0x69,
    0x6e,0x67,0x28,0x76,0x65,0x63,0x33,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x2c,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x70,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x62,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x63,0x6f,
    0x6c,0x6f,0x72,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,
    0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,
    0x33,0x34,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x66,0x73,0x5f,
    0x62,0x69,0x74,0x6d,0x61,0x70,0x2c,0x20,0x75,0x76,0x2e,0x78,0x79,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x33,0x34,0x2e,0x77,0x20,0x3c,0x20,
    0x30,0x2e,0x35,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x64,0x69,0x73,0x63,0x61,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x20,0x3d,0x20,0x5f,0x33,0x34,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,
    0x38,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x31,0x2e,0x35,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,
    0x65,0x63,0x34,0x28,0x76,0x69,0x67,0x6e,0x65,0x74,0x74,0x69,0x6e,0x67,0x28,0x70,
    0x61,0x72,0x61,0x6d,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x2c,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x32,0x29,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform vec4 sky_vs_params[8];
    out vec3 eyedir;
    layout(location = 0) in vec4 position;
    
    void main()
    {
        eyedir = (vec3(sky_vs_params[0].z, sky_vs_params[1].z, sky_vs_params[2].z) + (vec3(sky_vs_params[0].x, sky_vs_params[1].x, sky_vs_params[2].x) * ((-position.x) / sky_vs_params[4].x))) + (vec3(sky_vs_params[0].y, sky_vs_params[1].y, sky_vs_params[2].y) * ((-position.y) / sky_vs_params[5].y));
        gl_Position = position;
    }
    
*/
static const char sky_vs_source_glsl330[445] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x73,0x6b,0x79,0x5f,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x38,0x5d,0x3b,0x0a,0x6f,0x75,0x74,
    0x20,0x76,0x65,0x63,0x33,0x20,0x65,0x79,0x65,0x64,0x69,0x72,0x3b,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x65,0x79,0x65,0x64,0x69,0x72,0x20,0x3d,
    0x20,0x28,0x76,0x65,0x63,0x33,0x28,0x73,0x6b,0x79,0x5f,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x7a,0x2c,0x20,0x73,0x6b,0x79,0x5f,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2e,0x7a,0x2c,0x20,0x73,
    0x6b,0x79,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2e,
    0x7a,0x29,0x20,0x2b,0x20,0x28,0x76,0x65,0x63,0x33,0x28,0x73,0x6b,0x79,0x5f,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x78,0x2c,0x20,0x73,
    0x6b,0x79,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2e,
    0x78,0x2c,0x20,0x73,0x6b,0x79,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x32,0x5d,0x2e,0x78,0x29,0x20,0x2a,0x20,0x28,0x28,0x2d,0x70,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x2e,0x78,0x29,0x20,0x2f,0x20,0x73,0x6b,0x79,0x5f,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x2e,0x78,0x29,0x29,0x29,0x20,
    0x2b,0x20,0x28,0x76,0x65,0x63,0x33,0x28,0x73,0x6b,0x79,0x5f,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x79,0x2c,0x20,0x73,0x6b,0x79,0x5f,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2e,0x79,0x2c,0x20,
    0x73,0x6b,0x79,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,
    0x2e,0x79,0x29,0x20,0x2a,0x20,0x28,0x28,0x2d,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x2e,0x79,0x29,0x20,0x2f,0x20,0x73,0x6b,0x79,0x5f,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x35,0x5d,0x2e,0x79,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x70,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform vec4 sky_fs_params[4];
    uniform sampler2D skydome;
    
    in vec3 eyedir;
    layout(location = 0) out vec4 frag_color;
    
    void main()
    {
        vec3 _19 = normalize(eyedir + vec3(0.0, -0.0199999995529651641845703125, 0.0));
        float _26 = _19.y;
        vec4 _58 = texture(skydome, ((((_19.xz / vec2(1.0 - (_26 * _26))) * (1.0 + _26)) * 0.9900000095367431640625) + vec2(1.0)) * 0.5);
        float _72 = 0.5 * (1.0 + dot(-sky_fs_params[0].xyz, _19));
        float _87 = _58.w;
        frag_color = vec4(mix(mix(sky_fs_params[2].xyz, sky_fs_params[1].xyz, vec3(abs(_26))), sky_fs_params[3].xyz, vec3(0.5 * ((((((_72 * _72) * _72) * _72) * _72) * _72) + _87))), 1.0);
        vec4 _117 = frag_color;
        vec3 _124 = mix(_117.xyz, sky_fs_params[3].xyz, vec3(_87));
        frag_color.x = _124.x;
        frag_color.y = _124.y;
        frag_color.z = _124.z;
    }
    
*/
static const char sky_fs_source_glsl330[835] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x73,0x6b,0x79,0x5f,0x66,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x3b,0x0a,0x75,0x6e,0x69,
    0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x73,
    0x6b,0x79,0x64,0x6f,0x6d,0x65,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,
    0x20,0x65,0x79,0x65,0x64,0x69,0x72,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,
    0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x31,0x39,0x20,0x3d,
    0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x65,0x79,0x65,0x64,0x69,
    0x72,0x20,0x2b,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x30,0x2c,0x20,0x2d,0x30,
    0x2e,0x30,0x31,0x39,0x39,0x39,0x39,0x39,0x39,0x39,0x35,0x35,0x32,0x39,0x36,0x35,
    0x31,0x36,0x34,0x31,0x38,0x34,0x35,0x37,0x30,0x33,0x31,0x32,0x35,0x2c,0x20,0x30,
    0x2e,0x30,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x5f,0x32,0x36,0x20,0x3d,0x20,0x5f,0x31,0x39,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x35,0x38,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x28,0x73,0x6b,0x79,0x64,0x6f,0x6d,0x65,0x2c,0x20,0x28,0x28,0x28,
    0x28,0x5f,0x31,0x39,0x2e,0x78,0x7a,0x20,0x2f,0x20,0x76,0x65,0x63,0x32,0x28,0x31,
    0x2e,0x30,0x20,0x2d,0x20,0x28,0x5f,0x32,0x36,0x20,0x2a,0x20,0x5f,0x32,0x36,0x29,
    0x29,0x29,0x20,0x2a,0x20,0x28,0x31,0x2e,0x30,0x20,0x2b,0x20,0x5f,0x32,0x36,0x29,
    0x29,0x20,0x2a,0x20,0x30,0x2e,0x39,0x39,0x30,0x30,0x30,0x30,0x30,0x30,0x39,0x35,
    0x33,0x36,0x37,0x34,0x33,0x31,0x36,0x34,0x30,0x36,0x32,0x35,0x29,0x20,0x2b,0x20,
    0x76,0x65,0x63,0x32,0x28,0x31,0x2e,0x30,0x29,0x29,0x20,0x2a,0x20,0x30,0x2e,0x35,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x37,0x32,
    0x20,0x3d,0x20,0x30,0x2e,0x35,0x20,0x2a,0x20,0x28,0x31,0x2e,0x30,0x20,0x2b,0x20,
    0x64,0x6f,0x74,0x28,0x2d,0x73,0x6b,0x79,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x5f,0x31,0x39,0x29,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x38,0x37,0x20,
    0x3d,0x20,0x5f,0x35,0x38,0x2e,0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x6d,
    0x69,0x78,0x28,0x6d,0x69,0x78,0x28,0x73,0x6b,0x79,0x5f,0x66,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x73,0x6b,0x79,
    0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2e,0x78,0x79,
    0x7a,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x61,0x62,0x73,0x28,0x5f,0x32,0x36,0x29,
    0x29,0x29,0x2c,0x20,0x73,0x6b,0x79,0x5f,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x33,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x30,
    0x2e,0x35,0x20,0x2a,0x20,0x28,0x28,0x28,0x28,0x28,0x28,0x5f,0x37,0x32,0x20,0x2a,
    0x20,0x5f,0x37,0x32,0x29,0x20,0x2a,0x20,0x5f,0x37,0x32,0x29,0x20,0x2a,0x20,0x5f,
    0x37,0x32,0x29,0x20,0x2a,0x20,0x5f,0x37,0x32,0x29,0x20,0x2a,0x20,0x5f,0x37,0x32,
    0x29,0x20,0x2b,0x20,0x5f,0x38,0x37,0x29,0x29,0x29,0x2c,0x20,0x31,0x2e,0x30,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x31,0x37,0x20,
    0x3d,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x31,0x32,0x34,0x20,0x3d,0x20,0x6d,0x69,
    0x78,0x28,0x5f,0x31,0x31,0x37,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x73,0x6b,0x79,0x5f,
    0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x2e,0x78,0x79,0x7a,
    0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x5f,0x38,0x37,0x29,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x20,0x3d,
    0x20,0x5f,0x31,0x32,0x34,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x79,0x20,0x3d,0x20,0x5f,0x31,0x32,0x34,
    0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x2e,0x7a,0x20,0x3d,0x20,0x5f,0x31,0x32,0x34,0x2e,0x7a,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x00,
};
/*
    #version 330
    
    out vec4 uv;
    layout(location = 0) in vec4 position;
    
    void main()
    {
        uv = vec4((position.xy + vec2(1.0)) * 0.5, position.xy);
        gl_Position = position;
    }
    
*/
static const char clouds_vs_source_glsl330[174] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x6f,0x75,
    0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,
    0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,
    0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x75,0x76,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x28,
    0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2e,0x78,0x79,0x20,0x2b,0x20,0x76,0x65,
    0x63,0x32,0x28,0x31,0x2e,0x30,0x29,0x29,0x20,0x2a,0x20,0x30,0x2e,0x35,0x2c,0x20,
    0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x2e,0x78,0x79,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform vec4 fog_params[1];
    uniform sampler2D tex_depth;
    
    in vec4 uv;
    layout(location = 0) out vec4 frag_color;
    
    void main()
    {
        frag_color = vec4(fog_params[0].xyz, 1.0 - exp(fog_params[0].w * texture(tex_depth, uv.xy).x));
    }
    
*/
static const char clouds_fs_source_glsl330[245] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x6f,0x67,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,
    0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x74,0x65,0x78,0x5f,
    0x64,0x65,0x70,0x74,0x68,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,
    0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,
    0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,
    0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,
    0x63,0x34,0x28,0x66,0x6f,0x67,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,
    0x2e,0x78,0x79,0x7a,0x2c,0x20,0x31,0x2e,0x30,0x20,0x2d,0x20,0x65,0x78,0x70,0x28,
    0x66,0x6f,0x67,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x77,0x20,
    0x2a,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x74,0x65,0x78,0x5f,0x64,0x65,
    0x70,0x74,0x68,0x2c,0x20,0x75,0x76,0x2e,0x78,0x79,0x29,0x2e,0x78,0x29,0x29,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform vec4 model_vs_instance_params[4];
    uniform vec4 model_vs_global_params[10];
    out vec4 color;
    layout(location = 3) in vec4 vcolor;
    out vec3 n;
    layout(location = 1) in vec4 normal;
    out vec3 l;
    out vec2 uv;
    layout(location = 2) in vec4 texcoord;
    layout(location = 0) in vec4 position;
    out float depth;
    out vec3 worldpos;
    out vec3 campos;
    
    void main()
    {
        color = vcolor;
        mat4 _26 = mat4(model_vs_instance_params[0], model_vs_instance_params[1], model_vs_instance_params[2], model_vs_instance_params[3]);
        n = normalize((_26 * vec4(normal.xyz, 0.0)).xyz);
        l = model_vs_global_params[9].xyz;
        uv = texcoord.xy;
        mat4 _55 = mat4(model_vs_global_params[0], model_vs_global_params[1], model_vs_global_params[2], model_vs_global_params[3]);
        vec4 _61 = (_55 * _26) * position;
        depth = _61.z / _61.w;
        worldpos = (_26 * position).xyz;
        campos = model_vs_global_params[8].xyz;
        gl_Position = ((mat4(model_vs_global_params[4], model_vs_global_params[5], model_vs_global_params[6], model_vs_global_params[7]) * _55) * _26) * position;
    }
    
*/
static const char model_vs_source_glsl330[1081] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x6d,0x6f,0x64,0x65,0x6c,
    0x5f,0x76,0x73,0x5f,0x69,0x6e,0x73,0x74,0x61,0x6e,0x63,0x65,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x34,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,
    0x76,0x65,0x63,0x34,0x20,0x6d,0x6f,0x64,0x65,0x6c,0x5f,0x76,0x73,0x5f,0x67,0x6c,
    0x6f,0x62,0x61,0x6c,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x30,0x5d,0x3b,
    0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x33,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x63,
    0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x6e,
    0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,
    0x6c,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x74,0x65,0x78,
    0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,
    0x65,0x63,0x34,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x6f,0x75,
    0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x64,0x65,0x70,0x74,0x68,0x3b,0x0a,0x6f,
    0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x77,0x6f,0x72,0x6c,0x64,0x70,0x6f,0x73,
    0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x63,0x61,0x6d,0x70,0x6f,
    0x73,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x63,
    0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,
    0x32,0x36,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x6d,0x6f,0x64,0x65,0x6c,0x5f,
    0x76,0x73,0x5f,0x69,0x6e,0x73,0x74,0x61,0x6e,0x63,0x65,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,0x6d,0x6f,0x64,0x65,0x6c,0x5f,0x76,0x73,0x5f,
    0x69,0x6e,0x73,0x74,0x61,0x6e,0x63,0x65,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x31,0x5d,0x2c,0x20,0x6d,0x6f,0x64,0x65,0x6c,0x5f,0x76,0x73,0x5f,0x69,0x6e,0x73,
    0x74,0x61,0x6e,0x63,0x65,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,
    0x20,0x6d,0x6f,0x64,0x65,0x6c,0x5f,0x76,0x73,0x5f,0x69,0x6e,0x73,0x74,0x61,0x6e,
    0x63,0x65,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x6e,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,
    0x28,0x28,0x5f,0x32,0x36,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x6e,0x6f,0x72,
    0x6d,0x61,0x6c,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,
    0x79,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6c,0x20,0x3d,0x20,0x6d,0x6f,0x64,
    0x65,0x6c,0x5f,0x76,0x73,0x5f,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x39,0x5d,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x75,0x76,0x20,0x3d,0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x35,0x35,0x20,0x3d,
    0x20,0x6d,0x61,0x74,0x34,0x28,0x6d,0x6f,0x64,0x65,0x6c,0x5f,0x76,0x73,0x5f,0x67,
    0x6c,0x6f,0x62,0x61,0x6c,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,
    0x20,0x6d,0x6f,0x64,0x65,0x6c,0x5f,0x76,0x73,0x5f,0x67,0x6c,0x6f,0x62,0x61,0x6c,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x6d,0x6f,0x64,0x65,
    0x6c,0x5f,0x76,0x73,0x5f,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x6d,0x6f,0x64,0x65,0x6c,0x5f,0x76,0x73,0x5f,
    0x67,0x6c,0x6f,0x62,0x61,0x6c,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x36,0x31,0x20,
    0x3d,0x20,0x28,0x5f,0x35,0x35,0x20,0x2a,0x20,0x5f,0x32,0x36,0x29,0x20,0x2a,0x20,
    0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x64,0x65,
    0x70,0x74,0x68,0x20,0x3d,0x20,0x5f,0x36,0x31,0x2e,0x7a,0x20,0x2f,0x20,0x5f,0x36,
    0x31,0x2e,0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,0x77,0x6f,0x72,0x6c,0x64,0x70,0x6f,
    0x73,0x20,0x3d,0x20,0x28,0x5f,0x32,0x36,0x20,0x2a,0x20,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x29,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x63,0x61,
    0x6d,0x70,0x6f,0x73,0x20,0x3d,0x20,0x6d,0x6f,0x64,0x65,0x6c,0x5f,0x76,0x73,0x5f,
    0x67,0x6c,0x6f,0x62,0x61,0x6c,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x38,0x5d,
    0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x28,0x28,0x6d,0x61,0x74,0x34,0x28,0x6d,
    0x6f,0x64,0x65,0x6c,0x5f,0x76,0x73,0x5f,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x2c,0x20,0x6d,0x6f,0x64,0x65,0x6c,0x5f,
    0x76,0x73,0x5f,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x35,0x5d,0x2c,0x20,0x6d,0x6f,0x64,0x65,0x6c,0x5f,0x76,0x73,0x5f,0x67,0x6c,
    0x6f,0x62,0x61,0x6c,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x36,0x5d,0x2c,0x20,
    0x6d,0x6f,0x64,0x65,0x6c,0x5f,0x76,0x73,0x5f,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x37,0x5d,0x29,0x20,0x2a,0x20,0x5f,0x35,0x35,
    0x29,0x20,0x2a,0x20,0x5f,0x32,0x36,0x29,0x20,0x2a,0x20,0x70,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform sampler2D model_bitmap;
    
    in vec2 uv;
    in vec4 color;
    layout(location = 0) out vec4 frag_color;
    in vec3 n;
    in vec3 l;
    in vec3 worldpos;
    in vec3 campos;
    layout(location = 1) out vec4 frag_depth;
    in float depth;
    
    float mypow(float x, float y)
    {
        return exp(log(x) * y);
    }
    
    vec3 computeLight(vec3 albedo, vec3 n_1, vec3 l_1, vec3 eyeDir, float specParam)
    {
        float param = max(0.0, dot(normalize(l_1 - eyeDir), -n_1));
        float param_1 = 20.0;
        return (albedo * max(dot(l_1, -n_1), 0.20000000298023223876953125)) + (vec3(mypow(param, param_1)) * specParam);
    }
    
    void main()
    {
        vec4 _82 = texture(model_bitmap, uv);
        vec4 tc = _82;
        if ((_82.w * color.w) < 0.5)
        {
            discard;
        }
        vec4 _165 = tc;
        _165.w = 1.0;
        tc = _165;
        frag_color = color * _165;
        vec3 param = frag_color.xyz;
        vec3 param_1 = -normalize(n);
        vec3 param_2 = l;
        vec3 param_3 = normalize(worldpos - campos);
        float param_4 = (((0.2989999949932098388671875 * frag_color.x) + (0.58700001239776611328125 * frag_color.y)) + (0.114000000059604644775390625 * frag_color.z)) * 0.300000011920928955078125;
        vec3 _148 = computeLight(param, param_1, param_2, param_3, param_4);
        frag_color.x = _148.x;
        frag_color.y = _148.y;
        frag_color.z = _148.z;
        frag_depth = vec4(depth, depth, depth, 1.0);
    }
    
*/
static const char model_fs_source_glsl330[1346] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,
    0x6d,0x6f,0x64,0x65,0x6c,0x5f,0x62,0x69,0x74,0x6d,0x61,0x70,0x3b,0x0a,0x0a,0x69,
    0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,
    0x63,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,
    0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x3b,0x0a,0x69,
    0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x6c,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,
    0x33,0x20,0x77,0x6f,0x72,0x6c,0x64,0x70,0x6f,0x73,0x3b,0x0a,0x69,0x6e,0x20,0x76,
    0x65,0x63,0x33,0x20,0x63,0x61,0x6d,0x70,0x6f,0x73,0x3b,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,
    0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x64,
    0x65,0x70,0x74,0x68,0x3b,0x0a,0x69,0x6e,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x64,
    0x65,0x70,0x74,0x68,0x3b,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x6d,0x79,0x70,
    0x6f,0x77,0x28,0x66,0x6c,0x6f,0x61,0x74,0x20,0x78,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x79,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,
    0x6e,0x20,0x65,0x78,0x70,0x28,0x6c,0x6f,0x67,0x28,0x78,0x29,0x20,0x2a,0x20,0x79,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x65,0x63,0x33,0x20,0x63,0x6f,0x6d,0x70,0x75,
    0x74,0x65,0x4c,0x69,0x67,0x68,0x74,0x28,0x76,0x65,0x63,0x33,0x20,0x61,0x6c,0x62,
    0x65,0x64,0x6f,0x2c,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x5f,0x31,0x2c,0x20,0x76,
    0x65,0x63,0x33,0x20,0x6c,0x5f,0x31,0x2c,0x20,0x76,0x65,0x63,0x33,0x20,0x65,0x79,
    0x65,0x44,0x69,0x72,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x73,0x70,0x65,0x63,
    0x50,0x61,0x72,0x61,0x6d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x6d,0x61,0x78,0x28,0x30,
    0x2e,0x30,0x2c,0x20,0x64,0x6f,0x74,0x28,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,
    0x65,0x28,0x6c,0x5f,0x31,0x20,0x2d,0x20,0x65,0x79,0x65,0x44,0x69,0x72,0x29,0x2c,
    0x20,0x2d,0x6e,0x5f,0x31,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x32,0x30,0x2e,
    0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x28,0x61,
    0x6c,0x62,0x65,0x64,0x6f,0x20,0x2a,0x20,0x6d,0x61,0x78,0x28,0x64,0x6f,0x74,0x28,
    0x6c,0x5f,0x31,0x2c,0x20,0x2d,0x6e,0x5f,0x31,0x29,0x2c,0x20,0x30,0x2e,0x32,0x30,
    0x30,0x30,0x30,0x30,0x30,0x30,0x32,0x39,0x38,0x30,0x32,0x33,0x32,0x32,0x33,0x38,
    0x37,0x36,0x39,0x35,0x33,0x31,0x32,0x35,0x29,0x29,0x20,0x2b,0x20,0x28,0x76,0x65,
    0x63,0x33,0x28,0x6d,0x79,0x70,0x6f,0x77,0x28,0x70,0x61,0x72,0x61,0x6d,0x2c,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x29,0x29,0x20,0x2a,0x20,0x73,0x70,0x65,0x63,
    0x50,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,
    0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x34,0x20,0x5f,0x38,0x32,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,
    0x6d,0x6f,0x64,0x65,0x6c,0x5f,0x62,0x69,0x74,0x6d,0x61,0x70,0x2c,0x20,0x75,0x76,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x74,0x63,0x20,0x3d,
    0x20,0x5f,0x38,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x28,0x5f,
    0x38,0x32,0x2e,0x77,0x20,0x2a,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x29,0x20,
    0x3c,0x20,0x30,0x2e,0x35,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x64,0x69,0x73,0x63,0x61,0x72,0x64,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x36,
    0x35,0x20,0x3d,0x20,0x74,0x63,0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x31,0x36,0x35,
    0x2e,0x77,0x20,0x3d,0x20,0x31,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x74,0x63,
    0x20,0x3d,0x20,0x5f,0x31,0x36,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,
    0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,
    0x2a,0x20,0x5f,0x31,0x36,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x2d,0x6e,0x6f,0x72,
    0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x6e,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x6c,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x33,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x77,0x6f,
    0x72,0x6c,0x64,0x70,0x6f,0x73,0x20,0x2d,0x20,0x63,0x61,0x6d,0x70,0x6f,0x73,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x34,0x20,0x3d,0x20,0x28,0x28,0x28,0x30,0x2e,0x32,0x39,0x38,0x39,0x39,
    0x39,0x39,0x39,0x34,0x39,0x39,0x33,0x32,0x30,0x39,0x38,0x33,0x38,0x38,0x36,0x37,
    0x31,0x38,0x37,0x35,0x20,0x2a,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x2e,0x78,0x29,0x20,0x2b,0x20,0x28,0x30,0x2e,0x35,0x38,0x37,0x30,0x30,0x30,
    0x30,0x31,0x32,0x33,0x39,0x37,0x37,0x36,0x36,0x31,0x31,0x33,0x32,0x38,0x31,0x32,
    0x35,0x20,0x2a,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x79,
    0x29,0x29,0x20,0x2b,0x20,0x28,0x30,0x2e,0x31,0x31,0x34,0x30,0x30,0x30,0x30,0x30,
    0x30,0x30,0x35,0x39,0x36,0x30,0x34,0x36,0x34,0x34,0x37,0x37,0x35,0x33,0x39,0x30,
    0x36,0x32,0x35,0x20,0x2a,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x2e,0x7a,0x29,0x29,0x20,0x2a,0x20,0x30,0x2e,0x33,0x30,0x30,0x30,0x30,0x30,0x30,
    0x31,0x31,0x39,0x32,0x30,0x39,0x32,0x38,0x39,0x35,0x35,0x30,0x37,0x38,0x31,0x32,
    0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x31,0x34,0x38,
    0x20,0x3d,0x20,0x63,0x6f,0x6d,0x70,0x75,0x74,0x65,0x4c,0x69,0x67,0x68,0x74,0x28,
    0x70,0x61,0x72,0x61,0x6d,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x2c,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,
    0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x20,0x3d,0x20,0x5f,
    0x31,0x34,0x38,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x79,0x20,0x3d,0x20,0x5f,0x31,0x34,0x38,0x2e,0x79,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x2e,0x7a,0x20,0x3d,0x20,0x5f,0x31,0x34,0x38,0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x72,0x61,0x67,0x5f,0x64,0x65,0x70,0x74,0x68,0x20,0x3d,0x20,0x76,0x65,
    0x63,0x34,0x28,0x64,0x65,0x70,0x74,0x68,0x2c,0x20,0x64,0x65,0x70,0x74,0x68,0x2c,
    0x20,0x64,0x65,0x70,0x74,0x68,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x00,
};
/*
    #version 330
    
    uniform vec4 ground_vs_params[14];
    out vec4 color;
    layout(location = 3) in vec4 vcolor;
    out vec3 n;
    layout(location = 1) in vec4 normal;
    out vec3 uv;
    layout(location = 2) in vec4 texcoord;
    layout(location = 0) in vec4 position;
    out vec4 worldpos_depth;
    out vec3 campos;
    out vec3 lightdir;
    
    void main()
    {
        color = vcolor;
        mat4 _26 = mat4(ground_vs_params[8], ground_vs_params[9], ground_vs_params[10], ground_vs_params[11]);
        n = normalize((_26 * vec4(normal.xyz, 0.0)).xyz);
        uv = vec3(texcoord.xy, ground_vs_params[13].w);
        mat4 _54 = mat4(ground_vs_params[0], ground_vs_params[1], ground_vs_params[2], ground_vs_params[3]);
        vec4 _60 = (_54 * _26) * position;
        worldpos_depth = vec4((_26 * position).xyz, _60.z / _60.w);
        campos = ground_vs_params[12].xyz;
        lightdir = ground_vs_params[13].xyz;
        gl_Position = ((mat4(ground_vs_params[4], ground_vs_params[5], ground_vs_params[6], ground_vs_params[7]) * _54) * _26) * position;
    }
    
*/
static const char ground_vs_source_glsl330[978] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x67,0x72,0x6f,0x75,0x6e,
    0x64,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x34,0x5d,0x3b,
    0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x33,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x63,
    0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x6e,
    0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,
    0x75,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,
    0x20,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,
    0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,
    0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x77,0x6f,0x72,0x6c,0x64,
    0x70,0x6f,0x73,0x5f,0x64,0x65,0x70,0x74,0x68,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,
    0x65,0x63,0x33,0x20,0x63,0x61,0x6d,0x70,0x6f,0x73,0x3b,0x0a,0x6f,0x75,0x74,0x20,
    0x76,0x65,0x63,0x33,0x20,0x6c,0x69,0x67,0x68,0x74,0x64,0x69,0x72,0x3b,0x0a,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x63,0x6f,0x6c,0x6f,0x72,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x32,0x36,0x20,0x3d,
    0x20,0x6d,0x61,0x74,0x34,0x28,0x67,0x72,0x6f,0x75,0x6e,0x64,0x5f,0x76,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x38,0x5d,0x2c,0x20,0x67,0x72,0x6f,0x75,0x6e,
    0x64,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x39,0x5d,0x2c,0x20,
    0x67,0x72,0x6f,0x75,0x6e,0x64,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x31,0x30,0x5d,0x2c,0x20,0x67,0x72,0x6f,0x75,0x6e,0x64,0x5f,0x76,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x31,0x5d,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x6e,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x28,
    0x5f,0x32,0x36,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x6e,0x6f,0x72,0x6d,0x61,
    0x6c,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x7a,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x75,0x76,0x20,0x3d,0x20,0x76,0x65,0x63,0x33,
    0x28,0x74,0x65,0x78,0x63,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,0x2c,0x20,0x67,0x72,
    0x6f,0x75,0x6e,0x64,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,
    0x33,0x5d,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,
    0x5f,0x35,0x34,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x67,0x72,0x6f,0x75,0x6e,
    0x64,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,
    0x67,0x72,0x6f,0x75,0x6e,0x64,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x31,0x5d,0x2c,0x20,0x67,0x72,0x6f,0x75,0x6e,0x64,0x5f,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x67,0x72,0x6f,0x75,0x6e,0x64,
    0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x36,0x30,0x20,0x3d,0x20,0x28,
    0x5f,0x35,0x34,0x20,0x2a,0x20,0x5f,0x32,0x36,0x29,0x20,0x2a,0x20,0x70,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x77,0x6f,0x72,0x6c,0x64,
    0x70,0x6f,0x73,0x5f,0x64,0x65,0x70,0x74,0x68,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,
    0x28,0x28,0x5f,0x32,0x36,0x20,0x2a,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x29,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x5f,0x36,0x30,0x2e,0x7a,0x20,0x2f,0x20,0x5f,
    0x36,0x30,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x63,0x61,0x6d,0x70,0x6f,
    0x73,0x20,0x3d,0x20,0x67,0x72,0x6f,0x75,0x6e,0x64,0x5f,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x31,0x32,0x5d,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x6c,0x69,0x67,0x68,0x74,0x64,0x69,0x72,0x20,0x3d,0x20,0x67,0x72,0x6f,
    0x75,0x6e,0x64,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x33,
    0x5d,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x28,0x28,0x6d,0x61,0x74,0x34,0x28,
    0x67,0x72,0x6f,0x75,0x6e,0x64,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x34,0x5d,0x2c,0x20,0x67,0x72,0x6f,0x75,0x6e,0x64,0x5f,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x35,0x5d,0x2c,0x20,0x67,0x72,0x6f,0x75,0x6e,0x64,
    0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x36,0x5d,0x2c,0x20,0x67,
    0x72,0x6f,0x75,0x6e,0x64,0x5f,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x37,0x5d,0x29,0x20,0x2a,0x20,0x5f,0x35,0x34,0x29,0x20,0x2a,0x20,0x5f,0x32,0x36,
    0x29,0x20,0x2a,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x00,
};
/*
    #version 330
    
    uniform sampler2D water;
    uniform sampler2D ground_bitmap;
    
    in vec3 uv;
    in vec4 worldpos_depth;
    in vec4 color;
    layout(location = 0) out vec4 frag_color;
    in vec3 n;
    in vec3 lightdir;
    in vec3 campos;
    layout(location = 1) out vec4 frag_depth;
    
    vec4 sampleWater(vec3 wpos, float cf, float sc, vec2 dir)
    {
        return texture(water, ((wpos.xz * 0.00200000009499490261077880859375) + (dir * (cf * 0.0500000007450580596923828125))) * sc);
    }
    
    float computeWater(vec3 wpos, float cf, float sc)
    {
        vec3 param = wpos;
        float param_1 = cf;
        float param_2 = sc;
        vec2 param_3 = vec2(1.0, 0.100000001490116119384765625);
        vec3 param_4 = wpos;
        float param_5 = cf;
        float param_6 = sc;
        vec2 param_7 = vec2(0.0, 0.7599999904632568359375);
        vec3 param_8 = wpos;
        float param_9 = cf;
        float param_10 = sc;
        vec2 param_11 = vec2(0.0, -0.64999997615814208984375);
        vec3 param_12 = wpos;
        float param_13 = cf;
        float param_14 = sc;
        vec2 param_15 = vec2(-0.20000000298023223876953125, -0.0500000007450580596923828125);
        vec4 _167 = (((sampleWater(param, param_1, param_2, param_3) + sampleWater(param_4, param_5, param_6, param_7)) + sampleWater(param_8, param_9, param_10, param_11)) + sampleWater(param_12, param_13, param_14, param_15)) * vec4(0.25);
        float _172 = _167.x;
        return ((_172 * _172) * _172) * _172;
    }
    
    float mypow(float x, float y)
    {
        return exp(log(x) * y);
    }
    
    vec3 computeLight(vec3 albedo, vec3 n_1, vec3 l, vec3 eyeDir, float specParam)
    {
        float param = max(0.0, dot(normalize(l - eyeDir), -n_1));
        float param_1 = 20.0;
        return (albedo * max(dot(l, -n_1), 0.20000000298023223876953125)) + (vec3(mypow(param, param_1)) * specParam);
    }
    
    void main()
    {
        vec4 _192 = texture(ground_bitmap, uv.xy);
        vec4 tc = _192;
        if (_192.w == 0.0)
        {
            discard;
        }
        vec4 _417 = tc;
        _417.w = 1.0;
        tc = _417;
        float spec = 0.100000001490116119384765625;
        int _220 = int(color.w * 255.0);
        if (_220 == 7)
        {
            frag_color = tc * vec4(color.xyz, 1.0);
        }
        else
        {
            if (_220 == 5)
            {
                frag_color = tc * vec4(color.xyz + (((((((texture(water, worldpos_depth.xz * 0.004999999888241291046142578125) * 2.0) - vec4(1.0)) * 0.100000001490116119384765625) + (((texture(water, worldpos_depth.zx * 0.006000000052154064178466796875) * 2.0) - vec4(1.0)) * 0.100000001490116119384765625)) + (((texture(water, worldpos_depth.xz * 0.00069999997504055500030517578125) * 2.0) - vec4(1.0)) * 0.20000000298023223876953125)) + (((texture(water, worldpos_depth.zx * 0.0007999999797903001308441162109375) * 2.0) - vec4(1.0)) * 0.20000000298023223876953125)).xyz * 0.5), 1.0);
            }
            else
            {
                if (_220 == 10)
                {
                    vec3 param = worldpos_depth.xyz;
                    float param_1 = 0.300000011920928955078125 * uv.z;
                    float param_2 = 1.0;
                    vec3 param_3 = worldpos_depth.xyz;
                    float param_4 = 0.100000001490116119384765625 * uv.z;
                    float param_5 = 5.0;
                    float _338 = (0.89999997615814208984375 * computeWater(param, param_1, param_2)) + (0.60000002384185791015625 * computeWater(param_3, param_4, param_5));
                    float _352 = 6.0 * _338;
                    spec = (_352 * _352) * _352;
                    frag_color = tc * vec4(mix(color.xyz * 0.800000011920928955078125, color.xyz * 1.2000000476837158203125, vec3(10.0 * _338)), 1.0);
                }
                else
                {
                    frag_color = tc * vec4(color.xyz, 1.0);
                }
            }
        }
        vec3 param_6 = frag_color.xyz;
        vec3 param_7 = normalize(n);
        vec3 param_8 = lightdir;
        vec3 param_9 = normalize(worldpos_depth.xyz - campos);
        float param_10 = spec;
        vec3 _399 = computeLight(param_6, param_7, param_8, param_9, param_10);
        frag_color.x = _399.x;
        frag_color.y = _399.y;
        frag_color.z = _399.z;
        frag_depth = vec4(worldpos_depth.w, worldpos_depth.w, worldpos_depth.w, 1.0);
    }
    
*/
static const char ground_fs_source_glsl330[4043] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,
    0x77,0x61,0x74,0x65,0x72,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x67,0x72,0x6f,0x75,0x6e,0x64,0x5f,
    0x62,0x69,0x74,0x6d,0x61,0x70,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,
    0x20,0x75,0x76,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x77,0x6f,0x72,
    0x6c,0x64,0x70,0x6f,0x73,0x5f,0x64,0x65,0x70,0x74,0x68,0x3b,0x0a,0x69,0x6e,0x20,
    0x76,0x65,0x63,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,
    0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,
    0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x3b,
    0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x6c,0x69,0x67,0x68,0x74,0x64,0x69,
    0x72,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x63,0x61,0x6d,0x70,0x6f,
    0x73,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,
    0x20,0x66,0x72,0x61,0x67,0x5f,0x64,0x65,0x70,0x74,0x68,0x3b,0x0a,0x0a,0x76,0x65,
    0x63,0x34,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x57,0x61,0x74,0x65,0x72,0x28,0x76,
    0x65,0x63,0x33,0x20,0x77,0x70,0x6f,0x73,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x63,0x66,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x73,0x63,0x2c,0x20,0x76,0x65,
    0x63,0x32,0x20,0x64,0x69,0x72,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x77,0x61,0x74,
    0x65,0x72,0x2c,0x20,0x28,0x28,0x77,0x70,0x6f,0x73,0x2e,0x78,0x7a,0x20,0x2a,0x20,
    0x30,0x2e,0x30,0x30,0x32,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x39,0x34,0x39,0x39,
    0x34,0x39,0x30,0x32,0x36,0x31,0x30,0x37,0x37,0x38,0x38,0x30,0x38,0x35,0x39,0x33,
    0x37,0x35,0x29,0x20,0x2b,0x20,0x28,0x64,0x69,0x72,0x20,0x2a,0x20,0x28,0x63,0x66,
    0x20,0x2a,0x20,0x30,0x2e,0x30,0x35,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x37,0x34,
    0x35,0x30,0x35,0x38,0x30,0x35,0x39,0x36,0x39,0x32,0x33,0x38,0x32,0x38,0x31,0x32,
    0x35,0x29,0x29,0x29,0x20,0x2a,0x20,0x73,0x63,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x63,0x6f,0x6d,0x70,0x75,0x74,0x65,0x57,0x61,0x74,0x65,
    0x72,0x28,0x76,0x65,0x63,0x33,0x20,0x77,0x70,0x6f,0x73,0x2c,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x63,0x66,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x73,0x63,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x20,0x3d,0x20,0x77,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x63,0x66,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x32,0x20,0x3d,0x20,0x73,0x63,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,
    0x63,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x20,0x3d,0x20,0x76,0x65,0x63,
    0x32,0x28,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x31,0x30,0x30,0x30,0x30,0x30,0x30,
    0x30,0x31,0x34,0x39,0x30,0x31,0x31,0x36,0x31,0x31,0x39,0x33,0x38,0x34,0x37,0x36,
    0x35,0x36,0x32,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x20,0x3d,0x20,0x77,0x70,0x6f,0x73,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x35,0x20,0x3d,0x20,0x63,0x66,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x36,0x20,0x3d,0x20,0x73,0x63,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x37,
    0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x37,
    0x35,0x39,0x39,0x39,0x39,0x39,0x39,0x30,0x34,0x36,0x33,0x32,0x35,0x36,0x38,0x33,
    0x35,0x39,0x33,0x37,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x38,0x20,0x3d,0x20,0x77,0x70,0x6f,0x73,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x39,0x20,0x3d,0x20,0x63,0x66,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x30,0x20,0x3d,0x20,0x73,0x63,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x31,0x31,0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x30,0x2c,0x20,
    0x2d,0x30,0x2e,0x36,0x34,0x39,0x39,0x39,0x39,0x39,0x37,0x36,0x31,0x35,0x38,0x31,
    0x34,0x32,0x30,0x38,0x39,0x38,0x34,0x33,0x37,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x32,0x20,0x3d,
    0x20,0x77,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x33,0x20,0x3d,0x20,0x63,0x66,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x31,0x34,0x20,0x3d,0x20,0x73,0x63,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x35,0x20,0x3d,0x20,0x76,0x65,0x63,
    0x32,0x28,0x2d,0x30,0x2e,0x32,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x32,0x39,0x38,
    0x30,0x32,0x33,0x32,0x32,0x33,0x38,0x37,0x36,0x39,0x35,0x33,0x31,0x32,0x35,0x2c,
    0x20,0x2d,0x30,0x2e,0x30,0x35,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x37,0x34,0x35,
    0x30,0x35,0x38,0x30,0x35,0x39,0x36,0x39,0x32,0x33,0x38,0x32,0x38,0x31,0x32,0x35,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x36,0x37,
    0x20,0x3d,0x20,0x28,0x28,0x28,0x73,0x61,0x6d,0x70,0x6c,0x65,0x57,0x61,0x74,0x65,
    0x72,0x28,0x70,0x61,0x72,0x61,0x6d,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,
    0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x33,0x29,0x20,0x2b,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x57,0x61,0x74,0x65,
    0x72,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x35,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x36,0x2c,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x37,0x29,0x29,0x20,0x2b,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x57,
    0x61,0x74,0x65,0x72,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x38,0x2c,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x39,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x30,0x2c,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x31,0x29,0x29,0x20,0x2b,0x20,0x73,0x61,
    0x6d,0x70,0x6c,0x65,0x57,0x61,0x74,0x65,0x72,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x31,0x32,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x33,0x2c,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x31,0x34,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x35,
    0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x32,0x35,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x37,0x32,0x20,
    0x3d,0x20,0x5f,0x31,0x36,0x37,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x28,0x28,0x5f,0x31,0x37,0x32,0x20,0x2a,0x20,0x5f,0x31,
    0x37,0x32,0x29,0x20,0x2a,0x20,0x5f,0x31,0x37,0x32,0x29,0x20,0x2a,0x20,0x5f,0x31,
    0x37,0x32,0x3b,0x0a,0x7d,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x6d,0x79,0x70,
    0x6f,0x77,0x28,0x66,0x6c,0x6f,0x61,0x74,0x20,0x78,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x79,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,
    0x6e,0x20,0x65,0x78,0x70,0x28,0x6c,0x6f,0x67,0x28,0x78,0x29,0x20,0x2a,0x20,0x79,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x65,0x63,0x33,0x20,0x63,0x6f,0x6d,0x70,0x75,
    0x74,0x65,0x4c,0x69,0x67,0x68,0x74,0x28,0x76,0x65,0x63,0x33,0x20,0x61,0x6c,0x62,
    0x65,0x64,0x6f,0x2c,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x5f,0x31,0x2c,0x20,0x76,
    0x65,0x63,0x33,0x20,0x6c,0x2c,0x20,0x76,0x65,0x63,0x33,0x20,0x65,0x79,0x65,0x44,
    0x69,0x72,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x73,0x70,0x65,0x63,0x50,0x61,
    0x72,0x61,0x6d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x6d,0x61,0x78,0x28,0x30,0x2e,0x30,
    0x2c,0x20,0x64,0x6f,0x74,0x28,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,
    0x6c,0x20,0x2d,0x20,0x65,0x79,0x65,0x44,0x69,0x72,0x29,0x2c,0x20,0x2d,0x6e,0x5f,
    0x31,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x32,0x30,0x2e,0x30,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x28,0x61,0x6c,0x62,0x65,0x64,
    0x6f,0x20,0x2a,0x20,0x6d,0x61,0x78,0x28,0x64,0x6f,0x74,0x28,0x6c,0x2c,0x20,0x2d,
    0x6e,0x5f,0x31,0x29,0x2c,0x20,0x30,0x2e,0x32,0x30,0x30,0x30,0x30,0x30,0x30,0x30,
    0x32,0x39,0x38,0x30,0x32,0x33,0x32,0x32,0x33,0x38,0x37,0x36,0x39,0x35,0x33,0x31,
    0x32,0x35,0x29,0x29,0x20,0x2b,0x20,0x28,0x76,0x65,0x63,0x33,0x28,0x6d,0x79,0x70,
    0x6f,0x77,0x28,0x70,0x61,0x72,0x61,0x6d,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x31,0x29,0x29,0x20,0x2a,0x20,0x73,0x70,0x65,0x63,0x50,0x61,0x72,0x61,0x6d,0x29,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x39,0x32,
    0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x67,0x72,0x6f,0x75,0x6e,
    0x64,0x5f,0x62,0x69,0x74,0x6d,0x61,0x70,0x2c,0x20,0x75,0x76,0x2e,0x78,0x79,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x74,0x63,0x20,0x3d,0x20,
    0x5f,0x31,0x39,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,
    0x39,0x32,0x2e,0x77,0x20,0x3d,0x3d,0x20,0x30,0x2e,0x30,0x29,0x0a,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,0x73,0x63,0x61,
    0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,
    0x63,0x34,0x20,0x5f,0x34,0x31,0x37,0x20,0x3d,0x20,0x74,0x63,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x5f,0x34,0x31,0x37,0x2e,0x77,0x20,0x3d,0x20,0x31,0x2e,0x30,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x74,0x63,0x20,0x3d,0x20,0x5f,0x34,0x31,0x37,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x73,0x70,0x65,0x63,0x20,0x3d,0x20,
    0x30,0x2e,0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x34,0x39,0x30,0x31,0x31,
    0x36,0x31,0x31,0x39,0x33,0x38,0x34,0x37,0x36,0x35,0x36,0x32,0x35,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x32,0x32,0x30,0x20,0x3d,0x20,0x69,0x6e,
    0x74,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x20,0x2a,0x20,0x32,0x35,0x35,0x2e,
    0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x32,0x30,
    0x20,0x3d,0x3d,0x20,0x37,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,
    0x3d,0x20,0x74,0x63,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x63,0x6f,0x6c,0x6f,
    0x72,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,
    0x32,0x30,0x20,0x3d,0x3d,0x20,0x35,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x63,0x20,0x2a,
    0x20,0x76,0x65,0x63,0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x79,0x7a,0x20,
    0x2b,0x20,0x28,0x28,0x28,0x28,0x28,0x28,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x28,0x77,0x61,0x74,0x65,0x72,0x2c,0x20,0x77,0x6f,0x72,0x6c,0x64,0x70,0x6f,0x73,
    0x5f,0x64,0x65,0x70,0x74,0x68,0x2e,0x78,0x7a,0x20,0x2a,0x20,0x30,0x2e,0x30,0x30,
    0x34,0x39,0x39,0x39,0x39,0x39,0x39,0x38,0x38,0x38,0x32,0x34,0x31,0x32,0x39,0x31,
    0x30,0x34,0x36,0x31,0x34,0x32,0x35,0x37,0x38,0x31,0x32,0x35,0x29,0x20,0x2a,0x20,
    0x32,0x2e,0x30,0x29,0x20,0x2d,0x20,0x76,0x65,0x63,0x34,0x28,0x31,0x2e,0x30,0x29,
    0x29,0x20,0x2a,0x20,0x30,0x2e,0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x34,
    0x39,0x30,0x31,0x31,0x36,0x31,0x31,0x39,0x33,0x38,0x34,0x37,0x36,0x35,0x36,0x32,
    0x35,0x29,0x20,0x2b,0x20,0x28,0x28,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,
    0x77,0x61,0x74,0x65,0x72,0x2c,0x20,0x77,0x6f,0x72,0x6c,0x64,0x70,0x6f,0x73,0x5f,
    0x64,0x65,0x70,0x74,0x68,0x2e,0x7a,0x78,0x20,0x2a,0x20,0x30,0x2e,0x30,0x30,0x36,
    0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x35,0x32,0x31,0x35,0x34,0x30,0x36,0x34,0x31,
    0x37,0x38,0x34,0x36,0x36,0x37,0x39,0x36,0x38,0x37,0x35,0x29,0x20,0x2a,0x20,0x32,
    0x2e,0x30,0x29,0x20,0x2d,0x20,0x76,0x65,0x63,0x34,0x28,0x31,0x2e,0x30,0x29,0x29,
    0x20,0x2a,0x20,0x30,0x2e,0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x34,0x39,
    0x30,0x31,0x31,0x36,0x31,0x31,0x39,0x33,0x38,0x34,0x37,0x36,0x35,0x36,0x32,0x35,
    0x29,0x29,0x20,0x2b,0x20,0x28,0x28,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,
    0x77,0x61,0x74,0x65,0x72,0x2c,0x20,0x77,0x6f,0x72,0x6c,0x64,0x70,0x6f,0x73,0x5f,
    0x64,0x65,0x70,0x74,0x68,0x2e,0x78,0x7a,0x20,0x2a,0x20,0x30,0x2e,0x30,0x30,0x30,
    0x36,0x39,0x39,0x39,0x39,0x39,0x39,0x37,0x35,0x30,0x34,0x30,0x35,0x35,0x35,0x30,
    0x30,0x30,0x33,0x30,0x35,0x31,0x37,0x35,0x37,0x38,0x31,0x32,0x35,0x29,0x20,0x2a,
    0x20,0x32,0x2e,0x30,0x29,0x20,0x2d,0x20,0x76,0x65,0x63,0x34,0x28,0x31,0x2e,0x30,
    0x29,0x29,0x20,0x2a,0x20,0x30,0x2e,0x32,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x32,
    0x39,0x38,0x30,0x32,0x33,0x32,0x32,0x33,0x38,0x37,0x36,0x39,0x35,0x33,0x31,0x32,
    0x35,0x29,0x29,0x20,0x2b,0x20,0x28,0x28,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x28,0x77,0x61,0x74,0x65,0x72,0x2c,0x20,0x77,0x6f,0x72,0x6c,0x64,0x70,0x6f,0x73,
    0x5f,0x64,0x65,0x70,0x74,0x68,0x2e,0x7a,0x78,0x20,0x2a,0x20,0x30,0x2e,0x30,0x30,
    0x30,0x37,0x39,0x39,0x39,0x39,0x39,0x39,0x37,0x39,0x37,0x39,0x30,0x33,0x30,0x30,
    0x31,0x33,0x30,0x38,0x34,0x34,0x31,0x31,0x36,0x32,0x31,0x30,0x39,0x33,0x37,0x35,
    0x29,0x20,0x2a,0x20,0x32,0x2e,0x30,0x29,0x20,0x2d,0x20,0x76,0x65,0x63,0x34,0x28,
    0x31,0x2e,0x30,0x29,0x29,0x20,0x2a,0x20,0x30,0x2e,0x32,0x30,0x30,0x30,0x30,0x30,
    0x30,0x30,0x32,0x39,0x38,0x30,0x32,0x33,0x32,0x32,0x33,0x38,0x37,0x36,0x39,0x35,
    0x33,0x31,0x32,0x35,0x29,0x29,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x30,0x2e,0x35,
    0x29,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x32,0x30,0x20,0x3d,
    0x3d,0x20,0x31,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,
    0x20,0x77,0x6f,0x72,0x6c,0x64,0x70,0x6f,0x73,0x5f,0x64,0x65,0x70,0x74,0x68,0x2e,
    0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x31,0x20,0x3d,0x20,0x30,0x2e,0x33,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x31,
    0x39,0x32,0x30,0x39,0x32,0x38,0x39,0x35,0x35,0x30,0x37,0x38,0x31,0x32,0x35,0x20,
    0x2a,0x20,0x75,0x76,0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x31,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x20,0x3d,0x20,0x77,0x6f,0x72,0x6c,
    0x64,0x70,0x6f,0x73,0x5f,0x64,0x65,0x70,0x74,0x68,0x2e,0x78,0x79,0x7a,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x20,0x3d,0x20,
    0x30,0x2e,0x31,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x34,0x39,0x30,0x31,0x31,
    0x36,0x31,0x31,0x39,0x33,0x38,0x34,0x37,0x36,0x35,0x36,0x32,0x35,0x20,0x2a,0x20,
    0x75,0x76,0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x35,0x20,0x3d,0x20,0x35,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x5f,0x33,0x33,0x38,0x20,0x3d,0x20,0x28,0x30,0x2e,0x38,0x39,0x39,0x39,0x39,
    0x39,0x39,0x37,0x36,0x31,0x35,0x38,0x31,0x34,0x32,0x30,0x38,0x39,0x38,0x34,0x33,
    0x37,0x35,0x20,0x2a,0x20,0x63,0x6f,0x6d,0x70,0x75,0x74,0x65,0x57,0x61,0x74,0x65,
    0x72,0x28,0x70,0x61,0x72,0x61,0x6d,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,
    0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x29,0x29,0x20,0x2b,0x20,0x28,0x30,
    0x2e,0x36,0x30,0x30,0x30,0x30,0x30,0x30,0x32,0x33,0x38,0x34,0x31,0x38,0x35,0x37,
    0x39,0x31,0x30,0x31,0x35,0x36,0x32,0x35,0x20,0x2a,0x20,0x63,0x6f,0x6d,0x70,0x75,
    0x74,0x65,0x57,0x61,0x74,0x65,0x72,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x2c,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x35,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x33,0x35,0x32,0x20,
    0x3d,0x20,0x36,0x2e,0x30,0x20,0x2a,0x20,0x5f,0x33,0x33,0x38,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x73,0x70,
    0x65,0x63,0x20,0x3d,0x20,0x28,0x5f,0x33,0x35,0x32,0x20,0x2a,0x20,0x5f,0x33,0x35,
    0x32,0x29,0x20,0x2a,0x20,0x5f,0x33,0x35,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x63,0x20,0x2a,0x20,0x76,0x65,0x63,
    0x34,0x28,0x6d,0x69,0x78,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x79,0x7a,0x20,
    0x2a,0x20,0x30,0x2e,0x38,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x31,0x39,0x32,0x30,
    0x39,0x32,0x38,0x39,0x35,0x35,0x30,0x37,0x38,0x31,0x32,0x35,0x2c,0x20,0x63,0x6f,
    0x6c,0x6f,0x72,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x31,0x2e,0x32,0x30,0x30,0x30,
    0x30,0x30,0x30,0x34,0x37,0x36,0x38,0x33,0x37,0x31,0x35,0x38,0x32,0x30,0x33,0x31,
    0x32,0x35,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x31,0x30,0x2e,0x30,0x20,0x2a,0x20,
    0x5f,0x33,0x33,0x38,0x29,0x29,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x63,0x20,0x2a,0x20,0x76,0x65,0x63,
    0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x36,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,
    0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x37,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,
    0x28,0x6e,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x38,0x20,0x3d,0x20,0x6c,0x69,0x67,0x68,0x74,0x64,0x69,0x72,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x39,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x77,
    0x6f,0x72,0x6c,0x64,0x70,0x6f,0x73,0x5f,0x64,0x65,0x70,0x74,0x68,0x2e,0x78,0x79,
    0x7a,0x20,0x2d,0x20,0x63,0x61,0x6d,0x70,0x6f,0x73,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x30,0x20,
    0x3d,0x20,0x73,0x70,0x65,0x63,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,
    0x20,0x5f,0x33,0x39,0x39,0x20,0x3d,0x20,0x63,0x6f,0x6d,0x70,0x75,0x74,0x65,0x4c,
    0x69,0x67,0x68,0x74,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x36,0x2c,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x37,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x38,0x2c,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x39,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,
    0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,
    0x6f,0x72,0x2e,0x78,0x20,0x3d,0x20,0x5f,0x33,0x39,0x39,0x2e,0x78,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x79,0x20,
    0x3d,0x20,0x5f,0x33,0x39,0x39,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,
    0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x7a,0x20,0x3d,0x20,0x5f,0x33,0x39,
    0x39,0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x64,0x65,
    0x70,0x74,0x68,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x77,0x6f,0x72,0x6c,0x64,
    0x70,0x6f,0x73,0x5f,0x64,0x65,0x70,0x74,0x68,0x2e,0x77,0x2c,0x20,0x77,0x6f,0x72,
    0x6c,0x64,0x70,0x6f,0x73,0x5f,0x64,0x65,0x70,0x74,0x68,0x2e,0x77,0x2c,0x20,0x77,
    0x6f,0x72,0x6c,0x64,0x70,0x6f,0x73,0x5f,0x64,0x65,0x70,0x74,0x68,0x2e,0x77,0x2c,
    0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before shaders.h"
#endif
static inline const sg_shader_desc* bitmap_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.vs.source = bitmap_vs_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 16;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "fsq_vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 1;
      desc.fs.source = bitmap_fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "fs_bitmap";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "bitmap_shader";
    }
    return &desc;
  }
  return 0;
}
static inline const sg_shader_desc* clouds_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.vs.source = clouds_vs_source_glsl330;
      desc.vs.entry = "main";
      desc.fs.source = clouds_fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 16;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "fog_params";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 1;
      desc.fs.images[0].name = "tex_depth";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "clouds_shader";
    }
    return &desc;
  }
  return 0;
}
static inline const sg_shader_desc* ground_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.attrs[1].name = "normal";
      desc.attrs[2].name = "texcoord";
      desc.attrs[3].name = "vcolor";
      desc.vs.source = ground_vs_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 224;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "ground_vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 14;
      desc.fs.source = ground_fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "water";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[1].name = "ground_bitmap";
      desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[1].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "ground_shader";
    }
    return &desc;
  }
  return 0;
}
static inline const sg_shader_desc* model_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.attrs[1].name = "normal";
      desc.attrs[2].name = "texcoord";
      desc.attrs[3].name = "vcolor";
      desc.vs.source = model_vs_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 64;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "model_vs_instance_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.vs.uniform_blocks[1].size = 160;
      desc.vs.uniform_blocks[1].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[1].uniforms[0].name = "model_vs_global_params";
      desc.vs.uniform_blocks[1].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[1].uniforms[0].array_count = 10;
      desc.fs.source = model_fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.images[0].name = "model_bitmap";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "model_shader";
    }
    return &desc;
  }
  return 0;
}
static inline const sg_shader_desc* sky_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "position";
      desc.vs.source = sky_vs_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 128;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "sky_vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 8;
      desc.fs.source = sky_fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 64;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "sky_fs_params";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 4;
      desc.fs.images[0].name = "skydome";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "sky_shader";
    }
    return &desc;
  }
  return 0;
}
